{
dat = rbind(dat,data.frame(subset(subset(iris,iris$Species == x),Petal.Length <= sort(sort(iris$Petal.Length[iris$Species == x])[2]))))
}
dat
for (x in levels(iris$Species))
{
datas = rbind(dat,data.frame(subset(subset(iris,iris$Species == x),Petal.Length <= sort(sort(iris$Petal.Length[iris$Species == x])[2]))))
}
datas
datas = data.frame()
for (x in levels(iris$Species))
{
datas = rbind(datas,data.frame(subset(subset(iris,iris$Species == x),Petal.Length <= sort(sort(iris$Petal.Length[iris$Species == x])[2]))))
}
datas
data.frame("id" = 1:nrow(iris), iris) %>% gather(measure, value,
Sepal.Length:Petal.Width) %>% arrange(id)
?gather
dat = data.frame("id" = 1:nrow(iris), iris)
da
dat
for (i in id)
{}
subset(dat,id = 1)
subset(dat,id == 1)
hh = subset(dat,id == 1)
data.frame(id = id,Species = hh$Species,measure = "Sepal.Length",value = hh$Sepal.Length)
data.frame(id = hh$id,Species = hh$Species,measure = "Sepal.Length",value = hh$Sepal.Length)
data.frame(id = hh$id,Species = hh$Species,measure = Sepal.Length,value = hh$Sepal.Length)
data.frame(id = hh$id,Species = hh$Species,measure = "Sepal.Length",value = hh$Sepal.Length)
levels(hh)
names(hh)
hh$names(hh)[5]
hh[5]
names(hh)[5]
names(hh[5])
hh[[5]]
for (i in dat$id)
{
temp = subset(dat,id == i)
for (x in c(2:5))
{
da = rbind(da,data.frame(id = temp$id,Species = temp$Species,measure = names(temp)[x],value = temp[[x]]))
}
}
da = data.frame()
for (i in dat$id)
{
temp = subset(dat,id == i)
for (x in c(2:5))
{
da = rbind(da,data.frame(id = temp$id,Species = temp$Species,measure = names(temp)[x],value = temp[[x]]))
}
}
da
da = data.frame()
for (i in dat$id)
{}
filter(iris, Sepal.Length > 7, Sepal.Width > 3)
library(dplyr)
library(tidyr)
filter(iris, Sepal.Length > 7, Sepal.Width > 3)
subset(iris,(Sepal.Length > 7) & (Sepal.Width > 3))
?subset
subset(iris,(Sepal.Length > 7) & (Sepal.Width > 3),drop = FALSE)
subset(iris,(Sepal.Length > 7) & (Sepal.Width > 3),drop = T)
subset(iris[,-1],(Sepal.Length > 7) & (Sepal.Width > 3),drop = T)
dat = subset(iris,(Sepal.Length > 7) & (Sepal.Width > 3))
row.names(dat)
row.names(dat) = -1
row.names(dat) = default.stringsAsFactors()
row.names(dat) = false
row.names(dat) = FALSE
?row.names
row.names(dat) = NULL
dat
distinct(iris)
data.frame(subset(iris,!duplicated(iris)),row.names = NULL)
top_n(group_by(iris, Species), -2, Petal.Length)
datas = data.frame()
for (x in levels(iris$Species))
{
datas = rbind(datas,data.frame(subset(subset(iris,iris$Species == x),Petal.Length <= sort(sort(iris$Petal.Length[iris$Species == x])[2]))))
}
datas
?tbl
?to.tbl
dbl
?dbl
typeof(top_n(group_by(iris, Species), -2, Petal.Length))
list(datas)
datas
row.names(datas) = NULL
data
datas
datas = data.frame()
for (x in levels(iris$Species))
{
datas = rbind(datas,data.frame(subset(subset(iris,iris$Species == x),Petal.Length <= sort(sort(iris$Petal.Length[iris$Species == x])[2]))))
}
datas = data.frame()
datas = data.frame()
for (x in levels(iris$Species))
{
datas = rbind(datas,data.frame(subset(subset(iris,iris$Species == x),Petal.Length <= sort(sort(iris$Petal.Length[iris$Species == x])[2])),row.names = NULL))
}
datas
?data.frame
L3 <- LETTERS[1:3]
fac <- sample(L3, 10, replace = TRUE)
(d <- data.frame(x = 1, y = 1:10, fac = fac))
## The "same" with automatic column names:
data.frame(1, 1:10, sample(L3, 10, replace = TRUE))
is.data.frame(d)
## do not convert to factor, using I() :
(dd <- cbind(d, char = I(letters[1:10])))
rbind(class = sapply(dd, class), mode = sapply(dd, mode))
stopifnot(1:10 == row.names(d))  # {coercion}
(d0  <- d[, FALSE])   # data frame with 0 columns and 10 rows
(d.0 <- d[FALSE, ])   # <0 rows> data frame  (3 named cols)
(d00 <- d0[FALSE, ])  # data frame with 0 columns and 0 rows
select(iris, -Species)
iris[,names(iris) != "Species"]
transmute(iris, sepal = Sepal.Length + Sepal.Width, petal = Petal.Length +
Petal.Width, species = Species)
datas = data.frame()
for (x in levels(iris$Species))
{
datas = rbind(datas,data.frame(subset(subset(iris,iris$Species == x),Petal.Length <= sort(sort(iris$Petal.Length[iris$Species == x])[2])),row.names = NULL))
}
datas
library(dplyr)
library(tidyr)
top_n(group_by(iris, Species), -2, Petal.Length)
iris[,names(iris) != "Species"]
#5
select(iris, -Species)
transmute(iris, sepal = Sepal.Length + Sepal.Width, petal = Petal.Length +
Petal.Width, species = Species)
datt = tapply(dat$Sepal.Length,dat$Species,function(x) Sepal.Length = Sepal.Length + Sepal.Width)
sepal = datt$setosa
datt = tapply(dat$Petal.Length,dat$Species,function(x) Petal.Length = Petal.Length + Petal.Width)
petal = datt$setosa
data.frame(sepal = sepal,petal = petal,species = species)
dat = iris
datt = tapply(dat$Sepal.Length,dat$Species,function(x) Sepal.Length = Sepal.Length + Sepal.Width)
sepal = datt$setosa
datt = tapply(dat$Petal.Length,dat$Species,function(x) Petal.Length = Petal.Length + Petal.Width)
petal = datt$setosa
data.frame(sepal = sepal,petal = petal,species = species)
attach(iris)
datt = tapply(dat$Sepal.Length,dat$Species,function(x) Sepal.Length = Sepal.Length + Sepal.Width)
sepal = datt$setosa
datt = tapply(dat$Petal.Length,dat$Species,function(x) Petal.Length = Petal.Length + Petal.Width)
petal = datt$setosa
data.frame(sepal = sepal,petal = petal,species = species)
library(dplyr)
library(tidyr)
attach(iris)
dat = iris
datt = tapply(dat$Sepal.Length,dat$Species,function(x) Sepal.Length = Sepal.Length + Sepal.Width)
sepal = datt$setosa
datt = tapply(dat$Petal.Length,dat$Species,function(x) Petal.Length = Petal.Length + Petal.Width)
petal = datt$setosa
data.frame(sepal = sepal,petal = petal,species = iris$Species)
transmute(iris, sepal = Sepal.Length + Sepal.Width, petal = Petal.Length +
Petal.Width, species = Species)
dat = data.frame(Species = levels(Species),Sepal.Length = tapply(iris$Sepal.Length,iris$Species,max),
Sepal.Width = tapply(iris$Sepal.Width,iris$Species,max),Petal.Width = tapply(iris$Petal.Width,iris$Species,max),
Petal.Length = tapply(iris$Petal.Length,iris$Species,max),check.names = TRUE)
dat
dat = data.frame(Species = levels(Species),Sepal.Length = tapply(iris$Sepal.Length,iris$Species,max),
Sepal.Width = tapply(iris$Sepal.Width,iris$Species,max),Petal.Width = tapply(iris$Petal.Width,iris$Species,max),
Petal.Length = tapply(iris$Petal.Length,iris$Species,max),check.names = TRUE,row.names = NULL)
dat
iris %>% group_by(Species) %>% summarize_all(max)
dat = data.frame(Species = levels(Species),Sepal.Length = tapply(iris$Sepal.Length,iris$Species,max),
Sepal.Width = tapply(iris$Sepal.Width,iris$Species,max),Petal.Length = tapply(iris$Petal.Length,iris$Species,max),
Petal.Width = tapply(iris$Petal.Width,iris$Species,max),check.names = TRUE,row.names = NULL)
dat
da = data.frame()
for (i in dat$id)
{
temp = subset(dat,id == i)
for (x in c(2:5))
{
da = rbind(da,data.frame(id = temp$id,Species = temp$Species,measure = names(temp)[x],value = temp[[x]]))
}
}
da
dat = iris
da = data.frame()
for (i in dat$id)
{
temp = subset(dat,id == i)
for (x in c(2:5))
{
da = rbind(da,data.frame(id = temp$id,Species = temp$Species,measure = names(temp)[x],value = temp[[x]]))
}
}
da
dat = data.frame("id" = 1:nrow(iris), iris)
da = data.frame()
for (i in dat$id)
{
temp = subset(dat,id == i)
for (x in c(2:5))
{
da = rbind(da,data.frame(id = temp$id,Species = temp$Species,measure = names(temp)[x],value = temp[[x]]))
}
}
da
dat = subset(iris,(Sepal.Length > 7) & (Sepal.Width > 3))
row.names(dat) = NULL
dat
data.frame(subset(iris,!duplicated(iris)),row.names = NULL)
datas = data.frame()
for (x in levels(iris$Species))
{
datas = rbind(datas,data.frame(subset(subset(iris,iris$Species == x),Petal.Length <= sort(sort(iris$Petal.Length[iris$Species == x])[2])),row.names = NULL))
}
datas
iris[,names(iris) != "Species"]
attach(iris)
dat = iris
datt = tapply(dat$Sepal.Length,dat$Species,function(x) Sepal.Length = Sepal.Length + Sepal.Width)
sepal = datt$setosa
datt = tapply(dat$Petal.Length,dat$Species,function(x) Petal.Length = Petal.Length + Petal.Width)
petal = datt$setosa
data.frame(sepal = sepal,petal = petal,species = iris$Species)
dat = data.frame(Species = levels(Species),Sepal.Length = tapply(iris$Sepal.Length,iris$Species,max),
Sepal.Width = tapply(iris$Sepal.Width,iris$Species,max),Petal.Length = tapply(iris$Petal.Length,iris$Species,max),
Petal.Width = tapply(iris$Petal.Width,iris$Species,max),check.names = TRUE,row.names = NULL)
dat
dat = data.frame("id" = 1:nrow(iris), iris)
da = data.frame()
for (i in dat$id)
{
temp = subset(dat,id == i)
for (x in c(2:5))
{
da = rbind(da,data.frame(id = temp$id,Species = temp$Species,measure = names(temp)[x],value = temp[[x]]))
}
}
da
library(shiny)
install.packages("shiny")
library(shiny)
library(shiny)
ui <- fluidPage()
server <- function(input,output)
{
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
sliderInput("num",label = "Number of Observations",min = 1,max = 500,value = 10),
plotOutput("fig")
)
server <- function(input,output)
{
output$fig = renderPlot(hist(rnorm(input$num)))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
sliderInput("num",label = "Number of Observations",min = 1,max = 500,value = 10),
plotOutput("fig")
)
server <- function(input,output)
{
output$fig = renderPlot(hist(rnorm(input$num),main = paste("Histogram of",input$num,"standard normal observations")))
output$summary = renderText(summary(rnorm(input$num)))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
sliderInput("num",label = "Number of Observations",min = 1,max = 500,value = 10),
plotOutput("fig"),
textOutput(summary)
)
server <- function(input,output)
{
output$fig = renderPlot(hist(rnorm(input$num),main = paste("Histogram of",input$num,"standard normal observations")))
output$summary = renderText(summary(rnorm(input$num)))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
sliderInput("num",label = "Number of Observations",min = 1,max = 500,value = 10),
plotOutput("fig"),
textOutput("summary")
)
server <- function(input,output)
{
output$fig = renderPlot(hist(rnorm(input$num),main = paste("Histogram of",input$num,"standard normal observations")))
output$summary = renderPrint(summary(rnorm(input$num)))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
sliderInput("num",label = "Number of Observations",min = 1,max = 500,value = 10),
plotOutput("fig"),
verbatimTextOutput("summary")
)
server <- function(input,output)
{
output$fig = renderPlot(hist(rnorm(input$num),main = paste("Histogram of",input$num,"standard normal observations")))
output$summary = renderPrint(summary(dat()))
}
shinyApp(ui = ui,server = server)
##
ui <- fluidPage(
sliderInput("num",label = "Number of Observations",min = 1,max = 500,value = 10),
textInput("title",label = "Plot Title",value = "Histogram"),
plotOutput("fig"),
)
server <- function(input,output)
{
output$fig = renderPlot(hist(rnorm(input$num),main = input$title))
}
shinyApp(ui = ui,server = server)
##
ui <- fluidPage(
sliderInput("num",label = "Number of Observations",min = 1,max = 500,value = 10),
textInput("title",label = "Plot Title",value = "Histogram"),
plotOutput("fig"),
)
server <- function(input,output)
{
output$fig = renderPlot(hist(rnorm(input$num),main = input$title))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
sliderInput("num",label = "Number of Observations",min = 1,max = 500,value = 10),
textInput("title",label = "Plot Title",value = "Histogram"),
plotOutput("fig"),
)
server <- function(input,output)
{
output$fig = renderPlot(hist(rnorm(input$num),main = input$title))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
sliderInput("num",label = "Number of Observations",min = 1,max = 500,value = 10),
textInput("title",label = "Plot Title",value = "Histogram"),
plotOutput("fig")
)
server <- function(input,output)
{
output$fig = renderPlot(hist(rnorm(input$num),main = input$title))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
actionButton("norm.go",label = "Normal"),
textInput("unif.go", label = "Uniform"),
plotOutput("fig")
)
server <- function(input,output)
{
rv = reactiveValues()
rv$dat = rnorm(300)
rv$title = "Histogram of normal data"
observeEvent(input$norm.go,{rv$dat = rnorm(300),rv$title = "Histogram of Normal Data"})
observeEvent(input$unif.go,{rv$dat = runif(300),rv$title = "Histogram of Uniform Data"})
output$fig = renderPlot(hist(rv$dat),main = rv$title)
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
actionButton("norm.go",label = "Normal"),
textInput("unif.go", label = "Uniform"),
plotOutput("fig")
)
server <- function(input,output)
{
dat = eventReactive(norm.go,{rnorm(300)})
dat = eventReactive(unif.go,runif(300))
output$fig = renderPlot(hist(dat()))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
actionButton("norm.go",label = "Normal"),
actionButton("unif.go", label = "Uniform"),
plotOutput("fig")
)
server <- function(input,output)
{
dat = eventReactive(norm.go,{rnorm(300)})
dat = eventReactive(unif.go,runif(300))
output$fig = renderPlot(hist(dat()))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
actionButton("norm.go",label = "Normal"),
actionButton("unif.go", label = "Uniform"),
plotOutput("fig")
)
server <- function(input,output)
{
dat = eventReactive(input$norm.go,{rnorm(300)})
dat = eventReactive(input$unif.go,runif(300))
output$fig = renderPlot(hist(dat()))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
actionButton("norm.go",label = "Normal"),
actionButton("unif.go", label = "Uniform"),
plotOutput("fig")
)
server <- function(input,output)
{
dat = eventReactive(norm.go,{rnorm(300)})
dat = eventReactive(unif.go,{rnorm(300)})
output$fig = renderPlot(hist(dat()))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
actionButton("norm.go",label = "Normal"),
actionButton("unif.go", label = "Uniform"),
plotOutput("fig")
)
server <- function(input,output)
{
dat = eventReactive(input$norm.go,{rnorm(300)})
dat = eventReactive(input$unif.go,{rnorm(300)})
output$fig = renderPlot(hist(dat()))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
actionButton("norm.go",label = "Normal"),
actionButton("unif.go", label = "Uniform"),
plotOutput("fig")
)
server <- function(input,output)
{
dat = eventReactive(input$unif.go,runif(300))
dat = eventReactive(input$norm.go,{rnorm(300)})
output$fig = renderPlot(hist(dat()))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
actionButton("norm.go",label = "Normal"),
actionButton("unif.go", label = "Uniform"),
plotOutput("fig")
)
server <- function(input,output)
{
dat = eventReactive(input$unif.go,runif(300))
dat = eventReactive(input$norm.go,{rnorm(300)})
output$fig = renderPlot(hist(dat()))
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
actionButton("norm.go",label = "Normal"),
actionButton("unif.go", label = "Uniform"),
plotOutput("fig")
)
server <- function(input,output)
{
dat = eventReactive(input$unif.go,runif(300))
dat = eventReactive(input$norm.go,{rnorm(300)})
output$fig = renderPlot(hist(dat()))
}
shinyApp(ui = ui,server = server)
install.packages("stringr")
nchar(NA)
nchar(NA) = 2
str_length(NA) = NA
str_length(NA)
library(stringr)
library(stringr)
str_length(NA)
paste(NULL + "hhh")
paste(NULL,"hhh")
paste("233",NULL,"hhh")
str_c("233",NULL,"hhh")
paste(month.abb,month.name)
h = paste(month.abb,month.name)
h
h = paste(month.abb,month.name,collapse = "|")
h
strsplit(c("aca"),a)
strsplit(c("aca"),"a")
str_split(c("aca"),"a")
str_sub("233",start = -2,end = -1)
word("233",start = -2,end = -1)
word("233",start = 1,end = 2)
word(c("233","566","788"),start = 1,end = 2)
str_trim("hh hh hhh")
str_trim("hh hh hhh\nhhh")
str_trim(" hh hh hhh\nhhh ")
str_split("Star Wars",a)
str_split("Star Wars","a")
str_split("Star Wars",r"a")
str_split("Star Wars","ar")
str_split("Star Wars","A")
str_split("1+1","\\+")
str_split("1+1","+")
str_split("1+1","\+")
str_split("1+1","\\+")
setwd("/Users/songshihong/Desktop/Zhihu-Trump")
setwd("/Users/songshihong/Desktop/Zhihu-Trump/mysite")
read.csv("temp.csv",header = FALSE)
dat = read.csv2(file = "temp.csv",header = FALSE)
view(dat)
dat = read.csv2(file = "temp.csv",header = FALSE)
view(dat)
dat
dat = read.csv2(file = "temp.csv",header = FALSE,sep = ",")
view(dat)
dat = read.csv2(file = "temp.csv",header = FALSE,sep = ",")
dat = read.csv2(file = "temp.csv",header = FALSE,sep = ",")
dat = read.csv2(file = "temp.csv",header = FALSE,sep = ",")
View(dat)
plot(dat)
as.Date(dat,"%y-%m-%d")
dat = read.csv2(file = "temp.csv",header = FALSE,sep = ",")
